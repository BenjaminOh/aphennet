version: "3.8"

services:
    # Nginx 리버스 프록시 (운영환경 - HTTPS)
    nginx:
        container_name: aphennet-nginx-prod
        image: nginx:alpine
        restart: always
        ports:
            - "${NGINX_EXPOSE_PORT:-80}:80"
            - "${NGINX_HTTPS_PORT:-443}:443"
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./certbot/conf:/etc/letsencrypt:ro
            - ./certbot/www:/var/www/certbot:ro
        environment:
            - USE_SSL=true
        depends_on:
            - react-app
            - node-app
        networks:
            - aphennet_net

    # Certbot for SSL certificates (운영환경)
    certbot:
        container_name: aphennet-certbot-prod
        build:
            context: ./certbot
            dockerfile: Dockerfile
        volumes:
            - ./certbot/conf:/etc/letsencrypt
            - ./certbot/www:/var/www/certbot
        networks:
            - aphennet_net
        restart: unless-stopped

    # Next.js 프론트엔드 (운영환경)
    react-app:
        container_name: aphennet-nextjs
        build:
            context: ./fe
            dockerfile: Dockerfile
            target: production
            args:
                NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL_PROD:-https://aphennetapi.likeweb.co.kr}
                NEXT_PUBLIC_SITE_ID: ${NEXT_PUBLIC_SITE_ID:-aphennet}
                NEXT_PUBLIC_MAINT_NAME: ${NEXT_PUBLIC_MAINT_NAME:-Aphennet}
                NEXT_PUBLIC_ENCRYPTION_KEY: ${NEXT_PUBLIC_ENCRYPTION_KEY:-your_encryption_key}
        restart: always
        environment:
            - NODE_ENV=production
            - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL_PROD:-https://aphennetapi.likeweb.co.kr}
            - TZ=Asia/Seoul
        env_file:
            - ./.env
        networks:
            - aphennet_net
        depends_on:
            - mariadb

    # Node.js 백엔드 (운영환경)
    node-app:
        container_name: aphennet-nodejs
        build:
            context: ./be
            dockerfile: Dockerfile
            target: production
        restart: always
        environment:
            - NODE_ENV=production
            - TZ=Asia/Seoul
        env_file:
            - ./.env
        networks:
            - aphennet_net
        depends_on:
            - mariadb
        healthcheck:
            test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # MariaDB (운영환경) - MariaDB 최신 버전 사용
    mariadb:
        container_name: aphennet-mariadb
        image: mariadb:10.11
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-aphennet_root!@34}
            MYSQL_DATABASE: ${DB_NAME:-aphennet_db}
            MYSQL_USER: ${DB_USER:-aphennet}
            MYSQL_PASSWORD: ${DB_PASS:-aphennet!@34}
            TZ: Asia/Seoul
        ports:
            - "${DB_EXPOSE_PORT:-3306}:3306"
        volumes:
            - mariadb_data:/var/lib/mysql
            - ./mariadb/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
        networks:
            - aphennet_net
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
            interval: 10s
            timeout: 5s
            retries: 5

volumes:
    mariadb_data:
    nextjs_node_modules:
    nodejs_node_modules:

networks:
    aphennet_net:
        driver: bridge
